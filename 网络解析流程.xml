<?xml version="1.0" encoding="UTF-8"?>
<WebPageLoadProcess targetUrl="百度首页 (e.g., https://www.baidu.com)">
  <Description>描述用户在浏览器中打开百度首页时发生的详细网络过程。</Description>

  <Step name="1. 解析URL (URL Parsing)">
    <UserInput>用户在地址栏输入 URL (e.g., "baidu.com", "https://www.baidu.com")</UserInput>
    <Action>浏览器分析输入的字符串</Action>
    <SubStep name="1.1. 协议与主机名分析">
      <Check>识别传输协议 (e.g., HTTP, HTTPS, or implied default)</Check>
      <Check>识别主机名 (e.g., "www.baidu.com")</Check>
      <Check>识别请求的资源路径 (e.g., "/" for the homepage)</Check>
      <Condition name="协议或主机名不合法">
        <Result>将地址栏内容传递给默认搜索引擎进行搜索</Result>
        <Outcome>流程终止于此，转为搜索引擎查询</Outcome>
      </Condition>
      <Condition name="协议和主机名合法">
        <Result>继续下一步</Result>
      </Condition>
    </SubStep>
    <SubStep name="1.2. 非法字符检查与转义">
      <Check>检查 URL 中是否存在非法字符 (e.g., spaces, non-ASCII characters)</Check>
      <Condition name="存在非法字符">
        <Action>对非法字符进行百分号编码 (Percent-encoding/URL escaping)</Action>
      </Condition>
      <Output>生成一个符合规范的、经过转义的 URL</Output>
    </SubStep>
    <FinalOutput step="1">标准化的 URL (协议, 主机名, 路径)</FinalOutput>
  </Step>

  <Step name="2. 缓存判断 (Cache Check)">
    <Goal>查找主机名 (www.baidu.com) 对应的 IP 地址，优先使用缓存</Goal>
    <CacheHierarchy>
      <Cache type="BrowserCache">
        <Check>检查浏览器自身的 DNS 缓存</Check>
        <ResultIfFound>获取 IP 地址，直接跳转到步骤 5 (建立TCP连接)</ResultIfFound>
      </Cache>
      <Cache type="SystemCache">
        <Detail>通常指操作系统的 'hosts' 文件</Detail>
        <Check>检查系统级别的 DNS 缓存或 hosts 文件</Check>
        <ResultIfFound>获取 IP 地址，直接跳转到步骤 5 (建立TCP连接)</ResultIfFound>
      </Cache>
      <Cache type="RouterCache">
        <Check>检查本地路由器的 DNS 缓存</Check>
        <ResultIfFound>获取 IP 地址，直接跳转到步骤 5 (建立TCP连接)</ResultIfFound>
      </Cache>
      <Cache type="ISPDNSCache">
        <Detail>互联网服务提供商 (ISP) 的 DNS 服务器缓存</Detail>
        <Check>检查 ISP DNS 服务器的缓存</Check>
        <ResultIfFound>获取 IP 地址，直接跳转到步骤 5 (建立TCP连接)</ResultIfFound>
      </Cache>
    </CacheHierarchy>
    <ResultIfNotFound>所有缓存均未命中，需要进行 DNS 解析</ResultIfNotFound>
    <Output>IP 地址 (如果命中缓存) 或 指示需要 DNS 解析</Output>
  </Step>

  <Step name="3. DNS解析 (DNS Resolution)">
    <Condition>所有缓存均未命中</Condition>
    <Goal>获取目标主机名 (www.baidu.com) 的 IP 地址</Goal>
    <Process>
      <Query initiation="Browser/OS">向配置的本地 DNS 服务器发起递归查询请求</Query>
      <RecursiveQuery process="由本地DNS服务器执行">
        <Check>本地 DNS 服务器缓存</Check>
        <ResultIfFound>返回 IP 地址给客户端</ResultIfFound>
        <QueryIfNotFound target="根域名服务器 (.)">询问负责 .com 的顶级域名服务器 (TLD) 的地址</QueryIfNotFound>
        <Response from="根域名服务器">返回 .com TLD 服务器地址列表</Response>
        <QueryIfNotFound target="顶级域名服务器 (.com)">询问负责 baidu.com 的权威域名服务器的地址</QueryIfNotFound>
        <Response from="顶级域名服务器 (.com)">返回 baidu.com 权威域名服务器地址列表</Response>
        <QueryIfNotFound target="权威域名服务器 (baidu.com)">查询 www.baidu.com 的 IP 地址 (A/AAAA 记录)</QueryIfNotFound>
        <Response from="权威域名服务器 (baidu.com)">返回 www.baidu.com 对应的 IP 地址</Response>
        <Action by="本地DNS服务器">缓存查询结果</Action>
        <Action by="本地DNS服务器">将 IP 地址返回给客户端 (浏览器/OS)</Action>
      </RecursiveQuery>
    </Process>
    <Output>目标服务器 (www.baidu.com) 的 IP 地址</Output>
  </Step>

  <Step name="4. 获取MAC地址 (MAC Address Resolution)">
    <Input>目标服务器 IP 地址 (来自缓存或 DNS 解析)</Input>
    <Goal>获取数据链路层下一跳的 MAC 地址，用于构建以太网帧</Goal>
    <Context>数据包从应用层 -> 传输层 (TCP/UDP, 添加端口) -> 网络层 (IP, 添加源/目的 IP) -> 数据链路层 (Ethernet, 添加源/目的 MAC)</Context>
    <Process>
      <Action>获取本机 IP 地址和子网掩码</Action>
      <Action>将目标 IP 地址与本机子网掩码进行按位与运算</Action>
      <Action>将本机 IP 地址与本机子网掩码进行按位与运算</Action>
      <Decision>比较两个运算结果 (网络地址)</Decision>
      <Path name="同一子网 (Same Subnet)">
        <Condition>目标 IP 地址与本机在同一子网</Condition>
        <ProtocolUsed>ARP (地址解析协议)</ProtocolUsed>
        <Action>在本子网内广播 ARP 请求: "谁拥有 [目标 IP 地址]? 请告知你的 MAC 地址"</Action>
        <Response>目标主机回复 ARP 应答，包含其 MAC 地址</Response>
        <Output>目标主机的 MAC 地址</Output>
        <Result>该 MAC 地址将作为以太网帧的目的 MAC 地址</Result>
      </Path>
      <Path name="不同子网 (Different Subnet)">
        <Condition>目标 IP 地址与本机不在同一子网</Condition>
        <Action>确定需要将数据包发送给默认网关 (Router)</Action>
        <Action>获取默认网关的 IP 地址 (通常在系统网络配置中)</Action>
        <ProtocolUsed>ARP (地址解析协议)</ProtocolUsed>
        <Action>在本子网内广播 ARP 请求: "谁拥有 [网关 IP 地址]? 请告知你的 MAC 地址"</Action>
        <Action>检查 ARP 缓存，若已有网关 MAC 地址则直接使用</Action>
        <Response>网关回复 ARP 应答，包含其 MAC 地址</Response>
        <Output>默认网关的 MAC 地址</Output>
        <Result>该网关 MAC 地址将作为以太网帧的目的 MAC 地址</Result>
      </Path>
    </Process>
    <FinalOutput step="4">下一跳设备的 MAC 地址 (目标主机或网关)</FinalOutput>
  </Step>

  <Step name="5. 建立TCP连接 (TCP Connection Establishment)">
    <Input>
      <Parameter name="目标IP地址">来自步骤 2 或 3</Parameter>
      <Parameter name="目标端口">通常为 80 (HTTP) 或 443 (HTTPS)</Parameter>
      <Parameter name="源IP地址">本机IP地址</Parameter>
      <Parameter name="源端口">由操作系统分配的临时端口</Parameter>
      <Parameter name="目的MAC地址">来自步骤 4 (下一跳 MAC)</Parameter>
      <Parameter name="源MAC地址">本机网卡 MAC 地址</Parameter>
    </Input>
    <Goal>建立可靠的、面向连接的通信通道</Goal>
    <Process name="TCP三次握手 (Three-Way Handshake)">
      <Message direction="Client -> Server">
        <Type>SYN</Type>
        <Content>Seq=J (客户端初始序列号)</Content>
        <Purpose>请求建立连接</Purpose>
      </Message>
      <Message direction="Server -> Client">
        <Type>SYN-ACK</Type>
        <Content>Seq=K (服务器初始序列号), Ack=J+1 (确认收到客户端SYN)</Content>
        <Purpose>同意连接并确认客户端请求</Purpose>
      </Message>
      <Message direction="Client -> Server">
        <Type>ACK</Type>
        <Content>Seq=J+1, Ack=K+1 (确认收到服务器SYN-ACK)</Content>
        <Purpose>确认连接建立</Purpose>
      </Message>
    </Process>
    <Output>成功建立的 TCP 连接</Output>
  </Step>

  <Step name="6. HTTPS的TLS握手 (TLS Handshake for HTTPS)">
    <Condition>如果请求的协议是 HTTPS (端口 443)</Condition>
    <Goal>在 TCP 连接之上建立一个安全的加密通道</Goal>
    <Process name="TLS/SSL Handshake (Simplified)">
      <Phase name="ClientHello">
        <Action>客户端发送支持的 TLS 版本、加密套件列表、一个随机数 (Client Random)</Action>
      </Phase>
      <Phase name="ServerHello">
        <Action>服务器选择一个 TLS 版本和加密套件</Action>
        <Action>服务器发送其数字证书 (包含公钥)</Action>
        <Action>服务器发送一个随机数 (Server Random)</Action>
        <Action>(可选) 服务器请求客户端证书</Action>
      </Phase>
      <Phase name="ClientKeyExchange & Verification">
        <Action>客户端验证服务器证书的有效性 (信任链、有效期、域名匹配)</Action>
        <Action>客户端生成一个预主密钥 (Pre-Master Secret)</Action>
        <Action>客户端使用服务器证书中的公钥加密预主密钥</Action>
        <Action>客户端发送加密后的预主密钥</Action>
        <Action>(可选) 如果服务器请求，客户端发送其证书和签名</Action>
        <Action>客户端发送 ChangeCipherSpec 消息，表示后续将使用协商好的密钥加密通信</Action>
        <Action>客户端发送 Encrypted Handshake Message (Finished)，包含之前所有握手消息的摘要，用协商的密钥加密</Action>
      </Phase>
      <Phase name="ServerKeyExchange & Finished">
         <Action>服务器使用私钥解密得到预主密钥</Action>
         <Action>客户端和服务器根据 Client Random, Server Random, Pre-Master Secret 生成相同的会话密钥 (对称密钥)</Action>
         <Action>服务器发送 ChangeCipherSpec 消息</Action>
         <Action>服务器发送 Encrypted Handshake Message (Finished)，包含之前所有握手消息的摘要，用协商的密钥加密</Action>
      </Phase>
    </Process>
    <Note>实际 TLS 握手可能因版本 (TLS 1.2, 1.3) 和协商的密钥交换算法而略有不同，例如 TLS 1.3 握手更高效。此处描述的是一个通用概念。</Note>
    <Output>建立安全的 TLS 加密通道</Output>
  </Step>

  <Step name="7. 发送HTTP请求 (Send HTTP Request)">
    <Condition>TCP 连接已建立 (如果是 HTTPS，则 TLS 通道也已建立)</Condition>
    <Action>浏览器构建 HTTP 请求报文</Action>
    <HTTPRequest>
      <RequestLine>
        <Method>GET</Method>
        <URI>/</URI>
        <HTTPVersion>HTTP/1.1 (或 HTTP/2)</HTTPVersion>
      </RequestLine>
      <Headers>
        <Header name="Host">www.baidu.com</Header>
        <Header name="User-Agent">...</Header>
        <Header name="Accept">text/html,application/xhtml+xml,...</Header>
        <Header name="Accept-Language">zh-CN,zh;q=0.9,...</Header>
        <Header name="Connection">keep-alive (或 close)</Header>
        <!-- 其他可能的 Headers: Cookie, Referer, Cache-Control, etc. -->
      </Headers>
      <Body>(对于 GET 请求通常为空)</Body>
    </HTTPRequest>
    <Action>将 HTTP 请求报文通过已建立的 TCP 连接 (和 TLS 通道) 发送给服务器</Action>
  </Step>

  <Step name="8. 服务器处理请求并返回响应 (Server Processing and Response)">
    <Phase name="ServerReceivesRequest">服务器的网络堆栈接收数据，去除各层协议头，将 HTTP 请求交给 Web 服务器软件 (如 Nginx, Apache)</Phase>
    <Phase name="ServerProcessesRequest">
      <Action>Web 服务器解析 HTTP 请求 (方法, 路径, Headers, etc.)</Action>
      <Action>根据请求路径 "/"，定位到默认主页资源 (e.g., index.html)</Action>
      <Action>(如果涉及动态内容) 可能执行后端脚本 (PHP, Java, Python etc.) 查询数据库或执行业务逻辑生成页面</Action>
      <Action>准备要返回的资源内容 (Baidu 首页的 HTML)</Action>
    </Phase>
    <Phase name="ServerConstructsResponse">
      <Action>服务器构建 HTTP 响应报文</Action>
      <HTTPResponse>
        <StatusLine>
          <HTTPVersion>HTTP/1.1 (或 HTTP/2)</HTTPVersion>
          <StatusCode>200</StatusCode>
          <ReasonPhrase>OK</ReasonPhrase>
        </StatusLine>
        <Headers>
          <Header name="Content-Type">text/html; charset=UTF-8</Header>
          <Header name="Content-Length">...</Header>
          <Header name="Date">...</Header>
          <Header name="Server">...</Header>
          <!-- 其他可能的 Headers: Set-Cookie, Cache-Control, ETag, etc. -->
        </Headers>
        <Body>Baidu 首页的 HTML 源代码</Body>
      </HTTPResponse>
    </Phase>
    <Phase name="ServerSendsResponse">
       <Action>将 HTTP 响应报文通过 TCP 连接 (和 TLS 通道) 发送回客户端浏览器</Action>
    </Phase>
  </Step>

  <Step name="9. 浏览器接收与渲染 (Browser Receives and Renders)">
    <Action>浏览器接收服务器返回的 HTTP 响应数据</Action>
    <SubStep name="9.1. 解析HTML">
        <Action>解析 HTML 代码，构建 DOM (Document Object Model) 树</Action>
    </SubStep>
    <SubStep name="9.2. 请求附加资源">
        <Action>在解析 HTML 过程中，发现需要加载外部资源 (如 CSS 文件, JavaScript 文件, 图片)</Action>
        <Action>对每个外部资源，重复执行步骤 2-8 (缓存检查, DNS, TCP, TLS(if needed), HTTP 请求/响应) 来获取它们</Action>
        <Note>可能会利用持久连接 (Keep-Alive) 或 HTTP/2 的多路复用优化资源加载</Note>
    </SubStep>
     <SubStep name="9.3. 构建渲染树">
        <Action>解析 CSS 文件 (内联, 外链, 内部样式表)，构建 CSSOM (CSS Object Model) 树</Action>
        <Action>将 DOM 树和 CSSOM 树结合，生成渲染树 (Render Tree)，只包含需要显示的节点及其样式信息</Action>
    </SubStep>
     <SubStep name="9.4. 布局与绘制">
        <Action>布局 (Layout/Reflow): 根据渲染树计算每个节点在屏幕上的精确位置和大小</Action>
        <Action>绘制 (Paint/Rasterize): 将渲染树的节点绘制到屏幕上</Action>
    </SubStep>
     <SubStep name="9.5. JavaScript 执行">
        <Action>执行 JavaScript 代码，可能会修改 DOM 或 CSSOM，导致重新布局和重绘</Action>
    </SubStep>
    <Output>用户在浏览器窗口看到渲染完成的百度首页</Output>
  </Step>

  <FinalOutcome>百度首页成功加载并显示给用户。</FinalOutcome>

</WebPageLoadProcess>